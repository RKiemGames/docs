# SOME DESCRIPTIVE TITLE.
# Copyright (C) Rdckgmes 2019
# This file is distributed under the same license as the Rdckgames package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Rdckgames 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-05 13:32-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../prog_04.rst:2
msgid "Formalizando la programación"
msgstr ""

#: ../../prog_04.rst:7
msgid ""
"Hasta ahora, hemos tratado de no ser tan técnicos con los temas de "
"programación , para que los puedas entender y llegar hasta acá con el "
"conocimiento adecuado, pero ahora te vamos a enseñar conceptos y términos"
" ocupados en programación, para que te sientas desde ya desarrollador."
msgstr ""

#: ../../prog_04.rst:13
msgid "Conceptos de programación"
msgstr ""

#: ../../prog_04.rst:15
msgid ""
"En programación existen muchísimos conceptos que debemos conocer antes de"
" programar códigos, pero para hacerte esto más fácil y no tengas que "
"estar memorizando cosas. te vamos a explicar aquí de una forma simple."
msgstr ""

#: ../../prog_04.rst:19
msgid ""
"**Lenguaje**: Un lenguaje en programación es lo que permite a la "
"computadora entender que queremos que ella haga, normalmente se les llama"
" lenguajes formales, porque son estrictos y limitados con definiciones "
"específicas, es decir, no le puedes escribir como si fuera una carta para"
" tu amigo que está lejos, los computadores no entienden así, por eso hay "
"que escribirlo en una forma que el computador entienda. existen muchos "
"lenguajes, pero son tan parecidos entre ellos que si aprendes uno, es "
"fácil aprender los demás, hay excepciones pero así como son excepciones "
"también son poco usados."
msgstr ""

#: ../../prog_04.rst:28
msgid ""
"**Sintaxis**: La sintaxis es la forma en cómo se escribe en un lenguaje, "
"es decir, que símbolos de puntuación debemos usar, como se deben crear "
"las variables, como se escribe un programa en general, cuando tu programa"
" arroja un error de sintaxis te está diciendo que está mal escrito algo, "
"es como cometer una falta ortográfica o una falta gramatical."
msgstr ""

#: ../../prog_04.rst:34
msgid ""
"**Programa**: El programa es lo que resulta de ejecutar el código escrito"
" con palabras. también las personas les suelen llamar aplicaciones o "
"simplemente apps."
msgstr ""

#: ../../prog_04.rst:38
msgid ""
"**Código**: También llamado código fuente, es la versión de texto de tu "
"programa escrito en el lenguaje formal de tu elección. es fácil de "
"transportar ya que no pesa tanto como el programa, pues son solo archivos"
" de texto."
msgstr ""

#: ../../prog_04.rst:42
msgid ""
"**Compilador**: Es una herramienta que nació con los lenguajes de "
"programación y es el encargado de convertir ese archivo de **código "
"fuente** a un programa para ejecutarlo."
msgstr ""

#: ../../prog_04.rst:46
msgid ""
"**Ejecutable**: Es el programa que te permite iniciar el programa o "
"videojuego."
msgstr ""

#: ../../prog_04.rst:48
msgid ""
"**Intérprete**: Es parecido a un compilador, pero con la diferencia que "
"no te genera un ejecutable, sino que lee el **código fuente** y lo va "
"ejecutando línea a línea y a medida que hace eso, puedes usar el "
"programa."
msgstr ""

#: ../../prog_04.rst:54
msgid "Terminología"
msgstr ""

#: ../../prog_04.rst:56
msgid ""
"Ya con lo anterior en mente, puedes entender un poco más sobre "
"programación, ahora vamos a algo más específico, que es la terminología "
"usada por los programadores, esto te ayudará a entender cómo un "
"programador piensa y habla cuando está en un proceso de producción de "
"desarrollo de un programa o de un videojuego. Estos son algunos términos "
"que podrás escuchar."
msgstr ""

#: ../../prog_04.rst:62
msgid ""
"**Ticket**: Conjunto de especificaciones que detalla cómo se debe crear "
"alguna funcionalidad o característica del videojuego o programa."
msgstr ""

#: ../../prog_04.rst:65
msgid ""
"**Bug**: Un error inesperado que el videojuego o programa tiene y que no "
"deja seguir jugándolo u usandolo."
msgstr ""

#: ../../prog_04.rst:68
msgid "**Error**: Sinónimo de bug."
msgstr ""

#: ../../prog_04.rst:70
msgid ""
"**Git**: Es un software open source que te permite llevar un control de "
"los cambios que haces en tu código, una de las ventajas es que no tienes "
"que preocuparte de estar haciendo copias actualizadas de tus archivos, "
"git te permite volver a un punto atrás en el tiempo de tu código, cuando "
"este fue distinto y compararlo con lo actual. Tiene un conjunto de "
"herramientas que te facilitan este proceso."
msgstr ""

#: ../../prog_04.rst:77
msgid ""
"**Commit**: Es cuando un programador guarda el progreso de su trabajo en "
"el código con **git** y cree que tiene una funcionalidad estable y "
"probada."
msgstr ""

#: ../../prog_04.rst:80
msgid ""
"**Tag**: Es cuando queremos poner una etiqueta de versión a algún "
"**commit** del código del videojuego o programa."
msgstr ""

#: ../../prog_04.rst:83
msgid ""
"**Push**: Es cuando el desarrollador sube a un repositorio remoto de "
"**git** su trabajo para compartirlo con los demás desarrolladores."
msgstr ""

#: ../../prog_04.rst:86
msgid ""
"**Pull**: Es cuando el desarrollador descarga el trabajo que han subido "
"al repositorio remoto de **git** sus otros compañeros."
msgstr ""

#: ../../prog_04.rst:89
msgid ""
"**Merge**: Es cuando el desarrollador combina su trabajo con el de los "
"demás desarrolladores usando **git**."
msgstr ""

#: ../../prog_04.rst:92
msgid ""
"**QA**: Es el proceso de hacer pruebas a un programa o videojuego, con el"
" objetivo de **asegurar la calidad** de este."
msgstr ""

#: ../../prog_04.rst:95
msgid ""
"**Deploy**: Es cuando se disponibiliza las actualizaciones del programa o"
" videojuego para tus clientes o gamers o se sube a una tienda de "
"aplicaciones de forma pública."
msgstr ""

#: ../../prog_04.rst:99
msgid ""
"**Sistema**: Un conjunto de aplicaciones que funcionan para un objetivo "
"en común."
msgstr ""

#: ../../prog_04.rst:102
msgid ""
"**Conexión**: Cuando un programa establece una comunicación con otra "
"aplicación o el exterior como internet, en los juegos online es muy común"
" esto."
msgstr ""

#: ../../prog_04.rst:107
msgid "Nombrado de variables"
msgstr ""

#: ../../prog_04.rst:109
msgid "Las variables deben seguir una regla muy simple de nombrado:"
msgstr ""

#: ../../prog_04.rst:111
msgid "Debe empezar por una letra"
msgstr ""

#: ../../prog_04.rst:112
msgid "Puede  tener números"
msgstr ""

#: ../../prog_04.rst:113
msgid "Puede tener _ (guión bajo)"
msgstr ""

#: ../../prog_04.rst:114
msgid "No debe contener espacios"
msgstr ""

#: ../../prog_04.rst:115
msgid "No puede contener tildes ni ñ"
msgstr ""

#: ../../prog_04.rst:116
msgid "No puede usar símbolos"
msgstr ""

#: ../../prog_04.rst:118
msgid ""
"Te mostraremos ejemplos de nombrados válidos e inválidos para que tengas "
"una referencia"
msgstr ""

#: ../../prog_04.rst:121
msgid "Listado de variables válidas."
msgstr ""

#: ../../prog_04.rst:123
msgid "variable_1"
msgstr ""

#: ../../prog_04.rst:124
msgid "variable1"
msgstr ""

#: ../../prog_04.rst:125
msgid "variable_uno"
msgstr ""

#: ../../prog_04.rst:127
msgid "Listado de variables erróneas."
msgstr ""

#: ../../prog_04.rst:129
msgid "1_variable (Empieza por número, esto no se puede hacer)"
msgstr ""

#: ../../prog_04.rst:130
msgid "1variable (También empieza por un número, mal!)"
msgstr ""

#: ../../prog_04.rst:131
msgid "variable 1 (Tiene un espacio, no debes hacer esto)"
msgstr ""

#: ../../prog_04.rst:132
msgid "ñandu (Tiene una ñ, no sirve como variable)"
msgstr ""

#: ../../prog_04.rst:133
msgid "camión (Tiene una tilde, tampoco nos sirve como variable)"
msgstr ""

#: ../../prog_04.rst:134
msgid "@correo (Tiene un símbolo, los símbolos no los puedes usar)"
msgstr ""

#: ../../prog_04.rst:137
msgid "Inicializar variables"
msgstr ""

#: ../../prog_04.rst:139
msgid ""
"Una de las buenas prácticas que todo programador debería seguir es "
"definir antes sus variables y cuales van a ser sus valores iniciales, a "
"esto se le llama inicializar variables, si crees que necesitas una "
"variable debes inicializarla antes de usarla con un valor inicial, como "
"por ejemplo en este código:"
msgstr ""

#: ../../prog_04.rst:153
msgid ""
"Como puedes ver en el código anterior, parece ser que es el sistema de "
"seguridad de una casa, lo ideal es que esté asegurada siempre, así que "
"inicializamos las variables para la seguridad de la casa, quedando todas "
"activadas (True), para evitarnos problemas como que un ladrón entre a "
"robar a la casa sin que el sistema esté activado. Luego podemos usar "
"estas variables para hacer comprobaciones."
msgstr ""

#: ../../prog_04.rst:172
msgid ""
"Si notas cosas nuevas en este código no te preocupes más adelante te las "
"explicaremos en detalle, pero lo que trata de transmitir el ejemplo es "
"que al inicializar variables tienes el control total de cómo se va a "
"comportar desde un principio tu programa."
msgstr ""

#: ../../prog_04.rst:178
msgid "¿Qué son los Tipos de datos?"
msgstr ""

#: ../../prog_04.rst:180
msgid ""
"En el primer artículo hablamos que una variable puede almacenar números y"
" palabras, ahora, para que la computadora diferencie un número de una "
"palabra u otra cosa ocupa los **tipos de datos**. Los **tipos de datos** "
"te permiten, como programador, decidir cómo se va a ocupar una variable, "
"es decir, si queres que se ocupe para números, si quieres que se ocupe "
"para almacenar palabras, o por ejemplo algo más específico seria que un "
"número permita llevar decimales, o si una variable va a tener 2 valores "
"solamente, **verdadero** o **falso**. A continuación vamos a listar "
"algunos tipos de datos que normalmente se usan al programar videojuegos:"
msgstr ""

#: ../../prog_04.rst:190
msgid ""
"**int**: El tipo de dato **int**, significa que almacena números enteros,"
" los números enteros son aquellos que les llaman números del conjunto Z, "
"o los números positivos y negativos. para ser mas gráficos te daremos uno"
" ejemplo:"
msgstr ""

#: ../../prog_04.rst:203
msgid ""
"Y así, hasta el infinito negativo hacia la izquierda e infinito positivo "
"hacia la derecha. Nos son útil para contar cosas, como por ejemplo "
"cantidad de enemigos en pantalla, cantidad de artículos en un bolso, "
"etc..."
msgstr ""

#: ../../prog_04.rst:207
msgid ""
"**float**: El tipo de dato **float**, también almacena números pero este "
"permite llevar decimales, se les llaman números del conjunto R o reales. "
"Recuerdas el valor de PI 3.14159..., bueno este tipo de números son del "
"tipo de dato **float**. tienen alta precisión y nos sirven para mover un "
"personaje por pantalla o hacer barras de energía para los enemigos, crear"
" un sistemas de vida del personaje, donde podemos dividir en cuatro 1 "
"corazón (0.25 cada parte de corazón), lo importante es que estos números "
"van separados por un punto ``.`` seguido del la porción decimal, esto es "
"importante porque la coma ``,`` acá no funciona para números. Estos son "
"ejemplos de variables **float**."
msgstr ""

#: ../../prog_04.rst:224
msgid ""
"**string**: el tipo de dato **string** es el que te permite guardar "
"palabras, frases, o textos muy largos, en español **string** significa "
"cadena, pero el por qué se llama así, lo explicaremos más adelante. Los "
"**string** deben ir siempre encerrados entre comillas ``\"`` o cremillas "
"``'`` para que el programa los entienda como tal, si no se hace eso, el "
"programa los tratará como variables y arrojará un error o hará que tu "
"programa o videojuego funcione mal."
msgstr ""

#: ../../prog_04.rst:236
msgid ""
"**bool**: Este tipo de dato tiene un nombre muy raro, cierto?, bueno su "
"nombre proviene del señor **George Boole**, para resumir, el creador de "
"este tipo de dato, a raíz de lo que se llama Álgebra Booleana, que solo "
"acepta 2 valores, Verdadero (**True**) o falso (**False**), y para "
"reconocer su obra, le llamaron **Boolean**, basándose en su apellido "
"(Boole), y por consecuencia **bool**."
msgstr ""

#: ../../prog_04.rst:247
msgid ""
"Con estos cuatro **tipos de datos** podemos hacer casi cualquier programa"
" o videojuego, por supuesto que hay otros, pero más adelante los iremos "
"descubriendo."
msgstr ""

#: ../../prog_04.rst:251
msgid ""
"Hasta ahora los programas que puedes construir funcionan bien sin "
"problemas, pero hay algo que nos hace falta, por ejemplo:"
msgstr ""

#: ../../prog_04.rst:254
msgid ""
"Digamos que queremos hacer un programa que haga correr a un personaje, "
"ahora necesitamos que ese mismo programa haga correo a otros personajes "
"también, lo lógico sería copiar el programa y agregarlo al otro "
"personaje. pero qué pasa si tienes 1000 personajes distintos copiar 1000 "
"veces el mismo programa para los 1000 personajes ya parece algo "
"engorroso, y peor, digamos que no te diste cuenta que el programa tenía "
"un error y lo debes corregir, entonces ¿estás dispuesto a corregir 1000 "
"veces lo mismo?, claro que no!. También podemos pensar que es una acción "
"repetida, pero en realidad no lo es, porque no queremos que todos los "
"personajes corran a la vez, sino que corran independientemente, así que "
"te vamos a enseñar a como crear **funciones**."
msgstr ""

#: ../../prog_04.rst:266
msgid "¿Qué son las funciones?"
msgstr ""

#: ../../prog_04.rst:268
msgid ""
"Las funciones son porciones de código que las agrupar mediante un nombre "
"y en vez de escribir ese código cada vez, solo usamos a la función por su"
" nombre."
msgstr ""

#: ../../prog_04.rst:272
msgid "Usando funciones"
msgstr ""

#: ../../prog_04.rst:274
msgid "Te vamos a mostrar y explicar cómo es una función:"
msgstr ""

#: ../../prog_04.rst:285
msgid ""
"Lo importante de este ejemplo es que para que el programa sepa que "
"quieres crear una función debe usar la palabra **def** seguida del "
"nombre, y este nombre sigue la misma regla de nombrado de las variables, "
"luego deben ir entre paréntesis parámetros de entrada de la función y "
"finalizar con ``:`` para luego colocar el código indentado que se "
"ejecutará."
msgstr ""

#: ../../prog_04.rst:291
msgid ""
"Esto es solo un ejemplo, hay cosas que debes saber también para usar "
"funciones"
msgstr ""

#: ../../prog_04.rst:294
msgid "Parámetros formales y actuales"
msgstr ""

#: ../../prog_04.rst:296
msgid ""
"Los parámetros son la lista de variables que podemos usar con una "
"función, además ellos nos dan una pista de qué cosas espera que le "
"entreguemos para que pueda trabajar."
msgstr ""

#: ../../prog_04.rst:300
msgid "existen 2 conceptos aquí"
msgstr ""

#: ../../prog_04.rst:302
msgid ""
"**Parámetros formales**: Son los parámetros que están explícitos en la "
"función, en el ejemplo anterior la función correr, permite 1 parámetro "
"llamado **personaje**, y los parámetros deben ir entre paréntesis, si "
"decides que una función no necesita parámetros, entonces los paréntesis "
"deben ir vacíos:"
msgstr ""

#: ../../prog_04.rst:317
msgid ""
"**Parámetros actuales**: Son los parámetros que usamos para hacer "
"trabajar a la función, un ejemplo de esto es cuando le pasamos la "
"variable **personaje1** a la función **correr**:"
msgstr ""

#: ../../prog_04.rst:331
msgid ""
"Como puedes notar, hemos creado la función y luego la hemos llamado con "
"el parámetro **personaje1**, a este parámetro se le llama **parámetro "
"actual**."
msgstr ""

#: ../../prog_04.rst:334
msgid ""
"Las funciones también tiene la posibilidad de devolver un resultado "
"usando la palabra **return** seguido del resultado que queramos enviar, "
"este resultado lo podemos guardar en alguna variable para luego usarla "
"más adelante en el programa."
msgstr ""

#: ../../prog_04.rst:346
msgid "¿Qué son los Operadores?"
msgstr ""

#: ../../prog_04.rst:348
msgid ""
"Ya habíamos hablado un poco de ellos en `Programando decisiones "
"<prog_02.html#que-son-los-operadores>`_. esos operadores como indicaba el"
" artículo sirven para comparar."
msgstr ""

#: ../../prog_04.rst:352
msgid "En este apartado explicaremos en detalle sobre los demás:"
msgstr ""

#: ../../prog_04.rst:354
msgid ""
"**Matemáticos**: Estos operadores son los más comunes y de toda la vida, "
"la suma, resta, multiplicación y la división. Un ejemplo:"
msgstr ""

#: ../../prog_04.rst:364
msgid "También podemos ver otros operadores especiales muy usados"
msgstr ""

#: ../../prog_04.rst:374
msgid ""
"Existen otros operadores matemáticos más avanzados pero poco comunes, que"
" no cubriremos aún."
msgstr ""

#: ../../prog_04.rst:377
msgid ""
"**Booleanos**: Nos permiten comparar 2 variables **booleanas** o también "
"comparaciones, que les llamaremos expresiones y saber si se cumple una "
"condición verdadera o una condición falsa, los más comunes son **and** y "
"**or**."
msgstr ""

#: ../../prog_04.rst:382
msgid ""
"El operador booleano **and** comparar 2 expresiones, si ambas son "
"verdaderas entonces **and** nos dirá verdadero, pero si alguna de las "
"expresiones es falsa **and** nos dirá que es falso. aca va un ejemplo "
"para que entiendas mejor."
msgstr ""

#: ../../prog_04.rst:386
msgid ""
"Digamo que la Mamá de Pedrito es muy estricta y le dice a Pedrito "
"\"Pedrito vé a comprar al almacén 5 huevos y 2 tomates, lleva estos 2 "
"dólares\". Pedrito va al almacén y le dice al vendedor, \"quiero 5 huevos"
" y 2 tomates, tengo 2 dolares\", el señor del almacén le dice, \"con esos"
" 2 dolares solo te alcanza para 2 tomate y 2 huevos\" y Pedrito decide "
"aceptar la oferta, e ir donde la Mamá. Llegado a casa la Mamá lo regaña "
"porque le pidió que trajera 5 huevos y 2 tomates exactamente, así que "
"Pedrito le dice que no pudo comprar más porque le faltaba dinero, así que"
" la Mamá de Pedrito le entrega más dinero, Pedrito va al almacén, compra "
"lo que faltaba y ahora la mamá acepta la compra de Pedrito."
msgstr ""

#: ../../prog_04.rst:396
msgid "Esto es más fácil escribirlo en código que en palabras, mira este ejemplo:"
msgstr ""

#: ../../prog_04.rst:408
msgid ""
"Si analizas este pequeño programa la cantidad de huevos debe ser "
"exactamente 5 y además la cantidad de tomates exactamente 2 si alguno no "
"se cumple entonces la Mamá no acepta la compra, pero si la Mamá de "
"Pedrito le hubiese dicho traeme 5 huevos o 2 tomates, lo que le está "
"diciendo la Mamá a Pedrito es que si trae 5 huevos acepta la compra o si "
"trae 2 tomates también acepta la compra y si trae ambos mucho mejor, "
"acepta la compra, este caso sería así:"
msgstr ""

#: ../../prog_04.rst:425
msgid ""
"En este caso 2 huevos no es igual a 5 huevos, así que eso es falso, no se"
" cumple esta condición, pero lleva 2 tomates así que en este caso se "
"cumple una de las condiciones y por consecuencia la Mamá si acepta la "
"compra."
msgstr ""

#: ../../prog_04.rst:429
msgid ""
"Puedes mezclar muchas expresiones, pero debes tener en cuenta algo muy "
"importante, la computadora siempre resolverá primero todas las "
"expresiones que están unidas por **and** y luego todas las expresiones "
"unidas por **or**, es igual que la regla multiplicación y suma en la "
"jerarquía de operaciones, primero las multiplicaciones y luego las sumas."
msgstr ""

#: ../../prog_04.rst:435
msgid ""
"Existen otros operadores boleanos más avanzados pero poco comunes, que no"
" cubriremos aún."
msgstr ""

#: ../../prog_04.rst:439
msgid "Condiciones"
msgstr ""

#: ../../prog_04.rst:441
msgid ""
"Las condiciones en programación es lo que le llamamos en los artículos "
"anteriores **decisiones**. La palabra adecuada es esta y aca veremos algo"
" más interesante de ellas."
msgstr ""

#: ../../prog_04.rst:445
msgid ""
"Usando condiciones podemos hacer varias comparaciones a la vez, por "
"ejemplo digamos que tenemos una nave espacial que se puede mover en "
"varias direcciones pero solo en una dirección a la vez: arriba, abajo, "
"izquierda y derecha, en programación podemos hacer esto para asegurar que"
" se cumpla ese comportamiento:"
msgstr ""

#: ../../prog_04.rst:461
msgid ""
"como puedes ver si presionas cualquier otra tecla no se va a mover, si no"
" presionas ninguna tecla tampoco se va a mover, si presionas 2 teclas o "
"más en combinación de arriba, abajo, izquierda, derecha; tampoco se "
"moverá, solo se moverá si presionas una de esas teclas específicas una "
"cada vez, si te haz dado cuenta esto ya parece estar programando un "
"juego. la palabra **elif** nos permite evaluar otra condición totalmente "
"distinta y revisar si la expresión es verdadera y ejecutar la porción de "
"código que está dentro de ella."
msgstr ""

#: ../../prog_04.rst:471
msgid "Asignación"
msgstr ""

#: ../../prog_04.rst:473
msgid "Las asignaciones en programación, significa darle un valor a una variable"
msgstr ""

#: ../../prog_04.rst:479
msgid ""
"así de simple no tiene mayor complejidad, pero podemos aprovechar esta "
"asignación para hacer algunas cosas interesantes en videojuegos, como por"
" ejemplo llevar un puntaje y cada vez que el player recoja una moneda "
"valla sumando 10 puntos al puntaje:"
msgstr ""

#: ../../prog_04.rst:493
msgid ""
"A esto se le llama **contador** y permite ir incrementando la variable "
"puntaje en un valor fijo, ahora te explicamos como funciona en este "
"ejemplo iniciamos la variable **puntaje** en **0** luego cuando el "
"programa intenta ejecutar ``puntaje = puntaje + 10`` lo que hace primero "
"es resolver el código que está a la derecha del símbolo igual ``=``, para"
" este caso necesita tomar el valor que está en la variable **puntaje** y "
"sumarlo con el número 10, en este punto la variable **puntaje** aun vale "
"**0** entonces la suma que realiza es **0 + 10** dando como resultado "
"**10**, luego cuando la computadora ya tiene el resultado lo asigna a la "
"variable **puntaje** quedando ahora el valor de la variable **puntaje** "
"en **10**, si vuelves a recoger una moneda, como la variable **puntaje** "
"ahora vale **10** le sumará **10** y quedará con el valor **20** y asi "
"sucesivamente tantas monedas recojas."
msgstr ""

#: ../../prog_04.rst:507
msgid "También existe una notación más simple que te ayuda a escribir más rápido"
msgstr ""

#: ../../prog_04.rst:517
msgid ""
"Ahora digamos que tenemos 2 tipos de monedas de **10** de color "
"**amarillo** y de **50** de color **azul**, esto quedaría así:"
msgstr ""

#: ../../prog_04.rst:532
msgid ""
"A esta asignación se le llama **sumador** o **acumulador** porque permite"
" ir incrementando la variable **puntaje** con respecto al valor de otra "
"variable, en este caso la variable **valor**. La forma de resolver esto "
"es igual siempre, primero lo que está a la derecha del igual ``=`` y "
"luego lo asigna a la variable que está a la izquierda."
msgstr ""

#: ../../prog_04.rst:538
msgid "La forma abreviada sería así:"
msgstr ""

#: ../../prog_04.rst:549
msgid "¿Qué es una cadena?"
msgstr ""

#: ../../prog_04.rst:551
msgid ""
"Las cadenas no son más que las palabras y siguen la regla del tipo de "
"dato **string**, pero nos vamos a detener a explicar porqué se llaman "
"así. Se llaman **cadenas** porque las palabras son un conjunto unido de "
"letras, llamadas en programación caracteres, pero un caracter no solo es "
"una letra, puede ser cualquier símbolo, letra o número de tu teclado, "
"incluso el espacio. Al ir juntos un caracter tras de otro, asemejan una "
"cadena de metal donde un eslabón va junto uno de tras de otro. es "
"simplemente eso y justamente la palabra **string** en inglés significa en"
" español **cadena**."
msgstr ""

#: ../../prog_04.rst:561
msgid "Operaciones con Cadenas"
msgstr ""

#: ../../prog_04.rst:563
msgid ""
"Las cadenas de texto pueden tener algunas operaciones especiales como por"
" ejemplo podemos usarla con algunas operaciones matemáticas para hacer "
"cosas entretenidas:"
msgstr ""

#: ../../prog_04.rst:568
msgid "Concatenar"
msgstr ""

#: ../../prog_04.rst:575 ../../prog_04.rst:592
msgid "El resultado sería:"
msgstr ""

#: ../../prog_04.rst:582
msgid ""
"En este ejemplo el símbolo + permite unir las 3 cadenas y guardarla en la"
" variable **frase**"
msgstr ""

#: ../../prog_04.rst:585
msgid "También puedes repetir una cadena varias veces, usando la multiplicación"
msgstr ""

#: ../../prog_04.rst:598
msgid ""
"Acá vemos que la cadena **arr!** se ha repetido **3** veces ya que lo "
"multiplicamos por 3."
msgstr ""

#: ../../prog_04.rst:602
msgid "¿Qué son las tuplas y las listas?"
msgstr ""

#: ../../prog_04.rst:604
msgid ""
"Las tuplas y listas nos permiten almacenar varios valores en una sola "
"variable, son muy parecidas entre sí pero tienen algunas diferencias."
msgstr ""

#: ../../prog_04.rst:607
msgid "esto es una tupla:"
msgstr ""

#: ../../prog_04.rst:613
msgid ""
"Las tuplas tienen la característica que no podemos cambiar sus valores "
"una vez ya están definidos, es decir, son elementos de solo lectura, pero"
" sí podemos seguir agregando elementos a ellas, pero no quitarlos."
msgstr ""

#: ../../prog_04.rst:617
msgid ""
"Las listas por el contrario permiten todas las operaciones de agregar "
"quitar mover insertar entre otras más, esto sería una lista:"
msgstr ""

#: ../../prog_04.rst:624
msgid ""
"Como puedes ver la diferencia es muy sutil, en las tuplas usas (), y en "
"las listas usas [] y con tan solo eso ya podemos hacer todas las "
"operaciones siguientes:"
msgstr ""

#: ../../prog_04.rst:628
msgid "Si queremos convertir una una tupla en una lista puedes hacer esto"
msgstr ""

#: ../../prog_04.rst:634
msgid "Y si quieres convertir una lista en una tupla puedes hacer esto"
msgstr ""

#: ../../prog_04.rst:640
msgid ""
"Si queremos acceder a un valor dentro de una tupla o lista, debemos "
"acceder al valor dependiendo de la posición que se encuentre dentro de la"
" lista o tupla, en el ejemplo anterior tenemos números del 1 al 9, "
"entonces podemos inferir que la posición del 5 es el índice 0, la "
"posición 2 es el índice 1, la posición 3 es el índice 2, y asi "
"sucesivamente, asi que para acceder a la posición 5 debemos conocer su "
"índice, como te puedes dar cuenta el índice siempre es 1 menos que su "
"posición, entonces la posición 5 sería el índice 4. ahora ya podemos "
"acceder al valor 5 que es lo que queremos, y se hace de esta forma:"
msgstr ""

#: ../../prog_04.rst:654
msgid "También podemos agregar elementos a una lista:"
msgstr ""

#: ../../prog_04.rst:660
msgid "Quitar elementos de una lista:"
msgstr ""

#: ../../prog_04.rst:666
msgid "Sacar el último elemento de una lista y guardarlo en una variable:"
msgstr ""

#: ../../prog_04.rst:672
msgid "Sacar el primer elemento de una lista y guardarlo en una variable:"
msgstr ""

#: ../../prog_04.rst:679
msgid "Sacar el quinto elemento de una lista y guardarlo en una variable:"
msgstr ""

#: ../../prog_04.rst:685
msgid "Inserta un elemento en la quinta posición:"
msgstr ""

#: ../../prog_04.rst:693
msgid "Saber cuantos elementos tiene una lista o tupla:"
msgstr ""

#: ../../prog_04.rst:700
msgid "Invertir el orden de los elementos de una lista:"
msgstr ""

#: ../../prog_04.rst:706
msgid "Ordenar los elementos de una lista de menor a mayor:"
msgstr ""

#: ../../prog_04.rst:713
msgid "Conjuntos"
msgstr ""

#: ../../prog_04.rst:715
msgid ""
"Usando listas o tuplas podemos trabajar con conjuntos usando el comando "
"**set**, podemos saber si existe una intersección entre 2 listas o tuplas"
" o unirlas."
msgstr ""

#: ../../prog_04.rst:719
msgid "Ejemplos:"
msgstr ""

#: ../../prog_04.rst:730
msgid ""
"Esta son las operaciones más comunes que puedes realizar en listas y "
"tuplas, existen otras más avanzadas, pero no las cubriremos ya que no son"
" tan frecuentemente utilizadas."
msgstr ""

#: ../../prog_04.rst:735
msgid "¿Qué son los Diccionarios?"
msgstr ""

#: ../../prog_04.rst:737
msgid ""
"Diccionario es una palabra muy rara en programación para comprender "
"fácilmente, lo que primero se nos viene a la mente un diccionario de "
"palabras con significados, pero un diccionario en programación es más "
"parecido a un inventario, te muestro un ejemplo:"
msgstr ""

#: ../../prog_04.rst:754
msgid "Operaciones con diccionarios"
msgstr ""

#: ../../prog_04.rst:756
msgid ""
"Como puedes ver es muy útil para el inventario de tu personaje en un "
"videojuego. Imaginemos que tu personaje encuentra una manzana, es tan "
"fácil como hacer esto:"
msgstr ""

#: ../../prog_04.rst:764
msgid "Ahora tendrás una manzana en tu inventario."
msgstr ""

#: ../../prog_04.rst:766
msgid "te comes una manzana"
msgstr ""

#: ../../prog_04.rst:772
msgid "Te ganas un bonus que multiplica tus medicinas al doble"
msgstr ""

#: ../../prog_04.rst:778
msgid "Como puedes notar, crear diccionarios es muy simple."
msgstr ""

#: ../../prog_04.rst:780
msgid ""
"Este artículo ya tiene bastante información que tendrás que estudiar, "
"pero ya nos estamos acercando más a cómo desarrollar un videojuego, lo "
"bueno que está todo en una sola página y te sirve de referencia rápida si"
" se te olvida algo. aun así, si tienes dudas y necesitas una guía más "
"personalizada contáctanos a través de nuestra `página de facebook "
"Rdckgames <http://facebook.me/rdckgames>`_."
msgstr ""

